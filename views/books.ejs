<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  <title>Books</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/Customizable-Background--Overlay.css">
  <link rel="stylesheet" href="/css/Data-Table-styles.css">
  <link rel="stylesheet" href="/css/Data-Table.css">
  <link rel="stylesheet" href="/css/Footer-Dark-icons.css">
  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.15/css/dataTables.bootstrap.min.css">
  <link rel="stylesheet" href="/css/Login-Form-Basic-icons.css">
  <link rel="stylesheet" href="/css/Profile-with-data-and-skills.css">
  <link rel="stylesheet" href="/css/Soft-UI-Aside-Navbar.css">
  <link rel="stylesheet" href="/css/dropdown.css">
  <link rel="stylesheet" href="/css/dialog.css">
  <link rel="stylesheet" href="/css/input.css">
  <link rel="stylesheet" href="/css/buttons.css">
  <link rel="stylesheet" href="/css/review.css">
  <link rel="icon" type="image/x-icon" href="/img/favicon.ico">
  <script src="https://unpkg.com/axios@1.4.0"></script>
  <script src="https://unpkg.com/vue@next"></script>

<body>
  <%- include("includes/navbar.ejs") %>
  <div class="container" id="app">
    <br>
    <div class="form-inline">
      <form @submit.prevent="search('title')">
        <input type="text" v-model="searchTerm.title" class="input" @keyup.enter="search('title')" placeholder="Title">
      </form>
      <form @submit.prevent="search('author')">
        <input type="text" v-model="searchTerm.author" class="input" @keyup.enter="search('author')" placeholder="Author">
      </form>
      <form @submit.prevent="search('category')">
        <select class="input" v-model="searchTerm.category" @change="search('category')">
          <option selected disabled>Category</option>
          <% categories.forEach(category => { %>
          <option value="<%= category.name %>"><%= category.name %></option>
          <% }) %>
        </select>
      </form>
    </div>
    <div class="main-body">
      <div class="books">
        <% books.forEach(book => {%>
        <div class="book">
          <img src="<%=book.picture%>" @click="getBookData(<%=book.id%>)" width="218" height="333" />
        </div>
        <%}) %>
      </div>
    </div>
    <% if (session.user.type === "manager") {%>
    <button class="btn btn-primary floating-button" @click="newBookPanel = 'dialog-container'">
      <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
      </svg>
    </button>
    <% } %>
    <%- include('includes/bookInfo.ejs') %>
    <%- include('includes/newBook.ejs') %>
    <%- include('includes/editBook.ejs') %>
    <%- include('includes/reviewBook.ejs') %>
    </div>
  </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    const app = Vue.createApp({
      data() {
        return {
        newBookPanel: "dialog-container hidden",
        editBookPanel: "dialog-container hidden",
        reviewBookPanel: "dialog-container hidden",
        bookInfoPanel: "dialog-container hidden",
        book: null,
        message: null,
        searchTerm: {
          title: null,
          author: null,
          category: "Category"
        },
        // Book data for new and edit book forms
        title: null,
        authors: null,
        publisher: null,
        isbn: null,
        picture: null,
        pages: null,
        keywords: null,
        language: null,
        description: null,
        category: null,
        quantity: null,
        // Book data for review book form
        rating: null,
        review: null,
        };
      },
      methods: {
        getBookData(id) {
          // Handle form submission logic here
          axios.get(`http://localhost:3000/books/${id}`)
            .then(response => {
              // Handle success
              this.book = response.data;
              this.bookInfoPanel = "dialog-container";
            })
            .catch(error => {
              console.error('Error:', error);
            });
        },
        closeDialog(type) {
          if (type === 'info') {
            this.bookInfoPanel = "dialog-container hidden";
            this.book = null;
            this.message = null;
          } else if (type === 'new') {
            this.newBookPanel = "dialog-container hidden";
            this.message = null;
            this.title = null;
            this.authors = null;
            this.publisher = null;
            this.isbn = null;
            this.picture = null;
            this.pages = null;
            this.keywords = null;
            this.language = null;
            this.description = null;
            this.category = null,
            this.quantity = null;
          } else if (type === 'edit') {
            this.editBookPanel = "dialog-container hidden";
            this.book = null;
            this.message = null;
            this.title = null;
            this.authors = null;
            this.publisher = null;
            this.isbn = null;
            this.picture = null;
            this.pages = null;
            this.keywords = null;
            this.language = null;
            this.description = null;
            this.category = null,
            this.quantity = null;
          } else if (type === 'review') {
            this.reviewBookPanel = "dialog-container hidden";
            this.book = null;
            this.message = null;
            this.rating = null;
            this.review = null;
          }
        },
        reserveBook(id) {
          // Handle form submission logic here
          axios.post(`http://localhost:3000/books/reserve/${id}`)
            .then(response => {
              // Handle success
              this.message = response.data;
            })
            .catch(error => {
              this.message = error.response.data;
            });
        },
        search(type) {
          let name;
          if (type === 'title') {
            name = this.searchTerm.title.replace(' ', '%20');
          } else if (type === 'author') {
            name = this.searchTerm.author.replace(' ', '%20');
          } else if (type === 'category') {
            name = this.searchTerm.category.replace(' ', '%20');
          }
          window.location.href = `/books?${type}=${name}`;
        },
        addNewBook() {
          const params = new URLSearchParams();
          params.append('title', this.title);
          params.append('authors', this.authors);
          params.append('publisher', this.publisher);
          params.append('isbn', this.isbn);
          params.append('pages', this.pages);
          params.append('keywords', this.keywords);
          params.append('language', this.language);
          params.append('description', this.description);
          params.append('categories', this.category);
          params.append('picture', this.picture);
          params.append('quantity', this.quantity);
          axios.post(`http://localhost:3000/books/add`, params)
            .then(response => {
              // Handle success
              this.message = response.data;
            })
            .catch(error => {
              this.message = error.response.data;
            });
        },
        addPicture() {
          const params = new FormData();
          params.append('file', event.target.files[0]);
          let fileName = event.target.files[0].name;
          axios.post(`http://localhost:3000/books/add/picture`, params)
            .then(response => {
              // Handle success
              this.picture = fileName;
            })
            .catch(error => {
              this.message = error.response.data;
            });
        },
        openEditBookPanel() {
          this.bookInfoPanel = "dialog-container hidden";
          this.editBookPanel = "dialog-container";
          this.title = this.book.title;
          this.authors = this.book.authors;
          this.publisher = this.book.publisher;
          this.isbn = this.book.isbn;
          this.picture = this.book.picture;
          this.pages = this.book.pages;
          this.keywords = this.book.keywords;
          this.language = this.book.language;
          this.description = this.book.description;
          this.category = this.book.categories,
          this.quantity = this.book.quantity;
        },
        openReviewPanel() {

          this.bookInfoPanel = "dialog-container hidden";
          this.reviewBookPanel = "dialog-container";

        },
        editBook(id) {
          // Handle form submission logic here
          const params = new URLSearchParams();
          params.append('id', this.book.id);
          params.append('title', this.title);
          params.append('authors', this.authors);
          params.append('publisher', this.publisher);
          params.append('isbn', this.isbn);
          params.append('pages', this.pages);
          params.append('keywords', this.keywords);
          params.append('language', this.language);
          params.append('description', this.description);
          params.append('categories', this.category);
          params.append('picture', this.picture);
          params.append('quantity', this.quantity);
          axios.post(`http://localhost:3000/books/edit/${id}`, params)
            .then(response => {
              // Handle success
              this.message = response.data;
            })
            .catch(error => {
              this.message = error.response.data;
            });
        },
        reviewBook(id) {
          const params = new URLSearchParams();
          params.append('rating', this.rating);
          params.append('review', this.review);
          axios.post(`http://localhost:3000/books/review/${id}`, params)
            .then(response => {
              // Handle success
              this.message = response.data;
            })
            .catch(error => {
              this.message = error.response.data;
            });
        }
      }
    });

    app.mount('#app');
  </script>
</body>

</html>